{"meta":{"title":"Chen Rui's Blog","subtitle":null,"description":null,"author":null,"url":"https://crotoc.github.io"},"pages":[{"title":"all-archives","date":"2019-03-25T06:45:03.000Z","updated":"2019-03-25T21:56:42.225Z","comments":false,"path":"all-archives/index.html","permalink":"https://crotoc.github.io/all-archives/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2019-03-25T06:40:51.000Z","updated":"2019-03-25T21:56:42.225Z","comments":false,"path":"all-categories/index.html","permalink":"https://crotoc.github.io/all-categories/index.html","excerpt":"","text":""},{"title":"all-tags","date":"2019-03-25T06:44:13.000Z","updated":"2019-03-25T21:56:42.225Z","comments":false,"path":"all-tags/index.html","permalink":"https://crotoc.github.io/all-tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-03-25T21:56:42.225Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2019/03/26/hello-world/","link":"","permalink":"https://crotoc.github.io/2019/03/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"How to install v2ray service on R7800","slug":"How-to-install-v2ray-service-on-R7800","date":"2019-03-22T02:22:30.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2019/03/22/How-to-install-v2ray-service-on-R7800/","link":"","permalink":"https://crotoc.github.io/2019/03/22/How-to-install-v2ray-service-on-R7800/","excerpt":"","text":"如何在netgear R7800上面安装v2ray服务 我在前面一篇博客里面写过如何安装ss的服务，由于常用的ss失效（端口被封，ss已经能够被特征识别），所以折腾了一下v2ray。这想这应该也是大势所趋吧。 要求 一台安装了openWRT的路由器，本文使用r7800。 一个可用的v2ray服务器，可以花钱买，也可以自己用虚拟机搭建一个。本文使用自己搭建。 一个ubuntu系统用于编译相关的软件，使v2ray服务可以在router上面运行。 如果部署过ss服务器和客户端，那就完美了 懂一些linux 部署v2ray服务端这一部分主要参看了这个教程，在这里我只写下主要步骤。 登陆自己需要部署v2ray的服务器，如果是翻回国内就搞个有国内公网ip的虚拟机，如果科学上网，就弄个有国外ip虚拟机。然后下载脚本并且安装： wget https://install.direct/go.sh sudo bash go.sh 如果其中缺少什么依赖包，就自己安装好。 v2ray服务器端配置文件和ss服务器一样，需要针对v2ray写一个配置文件，这是我的。下面我来解释一下配置文件的内容: { //设置v2ray的log和orr文件；设置log的level &quot;log&quot;: { &quot;access&quot;: &quot;/home/ruichen/v2ray/v2ray.log&quot;, &quot;error&quot;: &quot;/home/ruichen/v2ray/v2ray.err&quot;, &quot;loglevel&quot;: &quot;warning&quot; }, //服务器端入站包的配置，即代理服务器信息 &quot;inbounds&quot;:[//main port { &quot;port&quot;: 18888, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { //这里需要一个UUID，可以找网站生成一个，相当于ss的用户名。 &quot;id&quot;: &quot;67ee3d0e-77c1-4776-8573-82ebc55176f9&quot;, &quot;alterId&quot;: 64 } ], //因为现在端口被查的厉害，所以我使用了一个随机端口的策略，避免长期使用一个端口容易被封。先建立一个绕行端口的通讯。 &quot;detour&quot;: { //绕行配置，即指示客户端使用 dynamicPort 的配置通信 &quot;to&quot;: &quot;dynamicPort&quot; } }, //这里的流量协议，我使用简单的kcp，听说比tcp好些 &quot;streamSettings&quot;: { &quot;network&quot;: &quot;kcp&quot; } }, { //随机端口的配置 &quot;protocol&quot;: &quot;vmess&quot;, &quot;port&quot;: &quot;18900-19000&quot;, // 端口范围 &quot;tag&quot;: &quot;dynamicPort&quot;, // 与上面的 detour to 相同 &quot;settings&quot;: { &quot;default&quot;: { &quot;alterId&quot;: 64 } }, //如何分配随机端口 &quot;allocate&quot;: { // 分配模式 &quot;strategy&quot;: &quot;random&quot;, // 随机开启 &quot;concurrency&quot;: 2, // 同时开放两个端口,这个值最大不能超过端口范围的 1/3 &quot;refresh&quot;: 3 // 每三分钟刷新一次 }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;kcp&quot; } } ], //服务器端的出站包配置，这里使用freedom，意思就是自动处理进来包的类型 &quot;outbounds&quot;: [{ &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {} }], //v2ray自带一个routing的功能，能够将设置的ip或者域名自动的routing。其中outboundTag有三种，这里使用blocked，意思是从这些ip来的通讯全部屏蔽掉，下面主要是本机的私有地址。 &quot;routing&quot;: { &quot;strategy&quot;: &quot;rules&quot;, &quot;settings&quot;: { &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [ &quot;0.0.0.0/8&quot;, &quot;10.0.0.0/8&quot;, &quot;100.64.0.0/10&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.2.0/24&quot;, &quot;192.168.0.0/16&quot;, &quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;::1/128&quot;, &quot;fc00::/7&quot;, &quot;fe80::/10&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot; } ] } } } UUID可以使用网站随机生成一个。 运行v2ray服务端到这里我们就算配置完成了，首先使用下面命令测试一下config.json是否存在错误： /usr/bin/v2ray/v2ray -test -config /etc/v2ray/config.json 如果顺利通过，就可以运行服务器： /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json 如果想使用systemctl来启动v2ray，需要用你的配置文件替换掉系统中/etc/v2ray/目录下的config.json文件。我这里使用软连接的方式，方便以后修改。 rm /etc/v2ray/config.json ln -s ~/v2ray/config.json /etc/v2ray/config.json 客户端部署v2ray比较神奇的地方在于客户端其实使用的是服务端的程序，只是配置文件不同。我这次需要将客户端安装到路由器上。 openWRT的安装直接参看前面的如何在路由器上安装openwrt 编译v2ray安装包由于v2ray比较新，是ss被喝茶之后出现的，所以现在openwrt各版本并没有直接的安装包，我这里借用了lean大的lede项目中的v2ray源码包。这个lede项目集成了很多种架构的核心，希望大家的router都能在里面找到。 首先，安装一个ubuntu 64bit，然后lede项目克隆到本地： git clone https://github.com/coolsnowwolf/lede 接着，进入lede目录，更新并安装feeds： cd lede ./scripts/feeds update -a ./scripts/feeds install -a 再接着使用gui界面选择需要编译的路由： make menuconfig 在这个gui界面中，需要做如下选择： Target System下面的Qualcomm Atheros IPQ806X，因为r7800的就是使用的这颗核心。 Network目录下的v2ray需要选上。 LuCI下面的Application下的Include V2ray需要选上。 然后编译： make -j1 V=s 这一步时间很长，其实可以优化，就是在gui界面中吧不需要的东西全部不选。由于我也不知道那些是可以不用的，所以没有来得及研究，只去掉了一些看起来就不相关的东西。 等待这一步结束，使用find命令找到v2ray相关的ipk包： find ./ -name &quot;*ipk&quot; | grep v2r 将这些ipk包scp到路由器中： scp ./bin/packages/arm_cortex-a15_neon-vfpv4/base/*v2ray*.ipk root@69.245.0.87:/root/ scp ipset-lists_20181104-1_arm_cortex-a15_neon-vfpv4.ipk root@*.*.*.*:/root/ 安装v2ray这个时候可以ssh登陆路由器，然后安装这些包： opkg install v2ray_v4.17.0_arm_cortex-a15_neon-vfpv4.ipk opkg install luci-app-v2ray-pro_1.0-11_all.ipk opkg install luci-i18n-v2ray-pro-zh-cn_1.0-11_all.ipk 注意安装过程中会各种报错，主要就是依赖包问题，比如dnsmasq，ipset，ipset-list，pdnsd-alt等，这是可以直接使用路由器的源安装，如 opkg install dnsmasq opkg install ipset 如果在源中找不到那么就从刚刚编译的里面找了之后安装： find ./ -name &quot;*ipk&quot; | grep ipset-list find ./ -name &quot;*ipk&quot; | grep pdnsd-alt 没有报错就算安装成功。 客户端配置因为本文中安装了v2ray的luci版本，所以可以直接在luci界面的Service下找到V2Ray Pro，然后填写设置。 填写server把Server Setting中的服务器地址，端口，id（这里填上文服务器端配置中的uuid），alter ID ，都填上保存。 翻回国内把Base Setting中的proxy mode改成Overseas Users watch China…，这是进入到unbluck-youku模式。 比较遗憾的一点是luci中并没有可以定制unblock-youku站点的地方。所以我们可以通过修改配置文件或者自动更新配置文件的方式达成。 配置文件的路径是/etc/gfwlist/unblock-youku，可以把需要的网址和ip填在其中，这样重启客户端就可以正常使用了。 手动添加方式 比如现在163音乐需要代理的网址是nos.netease.com，将这一条加入到/etc/gfwlist/unblock-youku文件中就可以了 自动添加方式 做一个需要代理网址的的链接。我这里使用的是我常用的链接，只对163音乐，qq音乐，腾讯视频和android tv端的云极光起作用。ipset的使用方法请自己找相关的文章。 然后修改/etc/init.d/v2ray。这个文件是主程序文件，里面写了如何调用ipset列表以及iptables的路由转发方式。我这里不详细的写了。在这个主程序文件的start函数中加入几行： case &quot;$vt_proxy_mode&quot; in M|V) awk &apos;!/^$/&amp;&amp;!/^#/{printf(&quot;ipset=/%s/&apos;&quot;$vt_gfwlist&quot;&apos;\\n&quot;,$0)}&apos; \\ /etc/gfwlist/$vt_gfwlist &gt; /var/etc/dnsmasq-go.d/02-ipset.conf ############################################################################## #####这里开始插入。 意思就是说下载上面那个链接的conf文件然后放到dnsmasq的配置文件家中。 echo &quot;Coping my conf&quot; wget https://crotoc.github.io/2019/01/22/Unblock-region-restriction-of-musics-videos/unblock.rules.v2ray.dnsmasq.conf \\ -O /var/etc/dnsmasq-go.d/unblock.rules.v2ray.dnsmasq.conf 2&gt;/dev/null ############################################################################## 这样每次启动服务的时候，程序会自动下载某一个链接，用于dnsmasq的配置。 自动添加方式-其他的可能 上面修改v2ray脚本的方式比较暴力，其实这一步我们要实现的东西就是将需要代理的网址和ip放到ipset的unblock-youku中，这样dnsmasq回去自动处理它。所以只要是能达到这个目的的都可以。 科学上网在luci的base setting中选base on gfw-list模式，然后路由会自动调用/etc/gfwlist/china-banned文件中的地址。gfw代理模式可以很方便的在luci界面中自定义。这里不在多说。 启动程序现在全部设置好了就可以启动程序了： /etc/init.d/v2ray start 如果list有什么改动，那么就stop在start 如果v2ray启动中，luci里面会显示V2Ray Pro RUNNING 其他如果大家不愿意通过luci去设置v2ray的客户端，那么也可以直接ssh到路由器上面启动。大概的步骤是： 写个客户端的config文件 建立一个ipset的table 写个iptables的链 这套流程里面最简单的方式可能是直接修改/etc/init.d/v2ray中的start程序中的启动行，将客户端config文件传进去即可。/etc/init.d/v2ray的主要任务就是我上面说的三条。任何一个任务都是可以修改的。 测试在路由器是ping某一个在列表中的地址，比如： ping v.youku.com 然后使用ipset查看unblock-youku列表： ipset list 如果上面的ip出现在unblock-youku列表中，那么ipset正确识别了需要代理的链接。 然后在服务器端看日志，如果可以看到相关链接的日志，那么就大功告成。 参考链接V2Ray 配置指南|V2Ray 白话文教程lean大的lede项目","categories":[],"tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://crotoc.github.io/tags/科学上网/"}],"keywords":[]},{"title":"Bugs when using the tranquilpeak hexo theme","slug":"Bugs-when-using-the-tranquilpeak-hexo-theme","date":"2019-03-15T17:48:20.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2019/03/16/Bugs-when-using-the-tranquilpeak-hexo-theme/","link":"","permalink":"https://crotoc.github.io/2019/03/16/Bugs-when-using-the-tranquilpeak-hexo-theme/","excerpt":"","text":"今天想将blog的主题从next 换成tranquilpeak,结果发现了很多的问题,这里记录一下: 因为我使用travis自动在线部署,所以主题里面的node_modules不是必须的. 这个主题的.gitignore文件中自动略去了assets文件夹,导致了网站看不到格式,只有文字. 需要将主题中的package.json里面的dependencies拷贝到主目录的package.json才能在travis端自动安装. 需要在主目录的_config.yml中设置language,不然出现的是德语.其中语言设置必须与主题中languages目录下的文件名对应. 标准调试过程为了加快下一次的调试,经验如下: 第一步本地安装包,找出依赖的问题: npm install 第二步生成本地public目录: hexo clean hexo g hexo s 用本地浏览器打开确定本地显示是否出错: localhost:4000 如果本地没错可以将这个本地版本git到remote端,使用网页链接查看是否有错. 如果有错则核对两次commit之间的偏差,确定问题所在. 在本次调试过程中,主要问题是assets文件夹被主题目录中的.gitignore忽略,这样网页只有文字没有样式.","categories":[],"tags":[],"keywords":[]},{"title":"Unblock region restriction of musics/videos","slug":"Unblock-region-restriction-of-musics-videos","date":"2019-01-22T02:16:24.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2019/01/22/Unblock-region-restriction-of-musics-videos/","link":"","permalink":"https://crotoc.github.io/2019/01/22/Unblock-region-restriction-of-musics-videos/","excerpt":"","text":"I try to capture the link for qq video, music and netease music. The file is at below: Unblock rules Unblock rules for dnsmasq on openWRT router Unblock rules of v2ray for dnsmasq on openWRT router","categories":[],"tags":[],"keywords":[]},{"title":"Windows 10下面最好的terminal (WSL)","slug":"terminal-in-windows-sub-linux-system","date":"2019-01-22T02:16:24.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2019/01/22/terminal-in-windows-sub-linux-system/","link":"","permalink":"https://crotoc.github.io/2019/01/22/terminal-in-windows-sub-linux-system/","excerpt":"","text":"Windows 10下面最好的terminal (WSL)介绍我主要的工作都在linux的服务器上,所以有个好用的终端非常重要.我使用过的终端非常多,包括了最简单的putty,稍微复杂一些的cygwin,然后是基于cmder的Conmu.他们各有个的优点: Putty贵在简单,只要能连上服务器就行,但是问题在于有的时候没有服务器我没法运行linux命令. cygwin是个很好的windows下面的linux系统,也有很多的插件可以开发,但是终端实在太难看了.我尝试过使用mintty作为前端,但是用过一两年之后还是弃用了,因为它对linux的原生命令支持的不好. ConEmu是我最满意的终端系统之一,但是后来出现了一个bug毁掉一切.那就是连到服务器上的时候,我使用emacs的分屏功能,中间的分隔会是不是的抽风,将一切变成乱码.作为一个常年使用emacs的人,这也是接受不能. 其他. 后来Windows 10系统集成了Windows sublinux系统实在太符合我的胃口了.作为一个使用过ubuntu系统作为主系统的人,简直对在windows上面运行ubuntu的诱惑无法抵御,于是我掉坑里了. 安装WSL这不是重点,贴个链接在此.WSL的安装和使用 安装X windowsWSL可以使用windows的powershell,但是对于这个终端我实在无爱,所以后来我选中了ubuntu的里面的原生linux终端terminator.那么首要的问题是如何在windows上面运行x windows的应用.这里有两个选择,一个是VcXsrv,一个是Xming. 我选择了XcXsrv, 大体步骤就是下载安装文件安装,这里不详述. 配置terminator安装了xwindows之后就可以打开WSL,安装terminator: sudo apt-get install terminator 命令行启动打开命令行工具,然后输入下面命令: bash -c -l &quot;DISPLAY=:0 terminator &amp;&quot; 快捷方式启动为了让terminator看起来像个程序一样启动,还需要一些其他的工作. 首先在ubuntu里面写一个脚本叫做terminator.sh.这个脚本主要为了实现自动检测打开x window服务器: #!/bin/sh cd ~ ## 检查windows系统当前的进程里面是否有vcxsrv.exe.如果有代表x windows已经开启,如果没有则开启 x=`/mnt/c/Windows/System32/tasklist.exe /FI &quot;IMAGENAME eq vcxsrv.exe&quot; | grep vcxsrv.exe`; if [[ ! \\$x ]];then &quot;/mnt/c/Program Files/VcXsrv/vcxsrv.exe&quot; :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto 2&gt; /dev/null &amp; fi ##将x windows的显示定在本地. export DISPLAY=:0.0 ##启动 terminator terminator 然后在windows下面边写一个快捷方式脚本startTerminator,vbs,这个脚本主要用于实现建立快捷方式打开terminator: &apos; 将运行服务器上的terminator.sh脚本存成一个参数变量 args = &quot;-c&quot; &amp; &quot; -l &quot; &amp; &quot;&quot;&quot;bash ~/SHscript/terminator.sh&quot;&quot;&quot; &apos; windows自动运行脚本，用上面的arg作为参数 WScript.CreateObject(&quot;Shell.Application&quot;).ShellExecute &quot;bash&quot;, args, &quot;&quot;, &quot;open&quot;, 0 然后在桌面建立一个快捷方式,在目标里面写上C:\\Users\\chenr6\\Downloads\\startTerminator.vbs,图标改成自己喜欢的样子.双击就可以打开了. 如何使用中文输入法首先我选择搜狗输入法,因为我想使用双拼,而且我在windows下面的输入法就是搜狗. 安装fcitx框架搜狗输入法的linux版本输入法需要fcitx框架,所以首先安装框架: sudo apt-get update sudo apt-get install fcitx sudo apt-get install fcitx-config-gtk sudo apt-get install fcitx-table-all sudo apt-get install im-switch 然后下载搜狗linux最新版deb包,并且安装: sudo dpkg -i sogouxxx.deb 如果需要输入法设置软件的界面中文,生成中文locale: sudo locale-gen zh_CN.UTF-8 将下列 在wsl的.bashrc文件中加入下面的设置: export XMODIFIERS=@im=fcitx export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx if [ \\$(ps -ax | grep dbus-daemon | wc -l) -eq 1 ]; then eval &apos;dbus-launch &gt; /dev/null 2&gt;&amp;1&apos; fi 打开fcitx设置程序: fcitx-configtool 在里面加入搜狗拼音,并且最好将全局设置中的输入法热键修改一下.重新打开wsl,愉快的使用吧 参考terminator参考 搜狗输入法参考","categories":[],"tags":[{"name":"setup","slug":"setup","permalink":"https://crotoc.github.io/tags/setup/"}],"keywords":[]},{"title":"Install customized fonts for imagemagick","slug":"Install-customized-fonts-for-imagemagick","date":"2018-09-28T15:46:24.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/09/28/Install-customized-fonts-for-imagemagick/","link":"","permalink":"https://crotoc.github.io/2018/09/28/Install-customized-fonts-for-imagemagick/","excerpt":"","text":"Install customized fonts for imagemagick 7 Download the font, for example, Roboto wget https://fonts.google.com/download?family=Roboto Download the processing script for fonts wget http://imagemagick.org/Usage/scripts/imagick_type_gen chmod +x imagick_type_gen According to the documents of imagemagick 7 (https://imagemagick.org/script/resources.php), ImageMagick is able to load raw TrueType and Postscript font files. It searches for the font configuration file, type.xml, in the following order, and loads them if found: \\$MAGICK_CONFIGURE_PATH \\$MAGICK_HOME/etc/ImageMagick/-7.0.8 \\$MAGICK_HOME/share/ImageMagick-7.0.8 \\$XDG_CACHE_HOME/ImageMagick \\$HOME/.config/ImageMagick &lt;client path&gt;/etc/ImageMagick \\$MAGICK_FONT_PATH$ So create a dir ~/.config/ImageMagick mkdir ~/.config/ImageMagick According the description section in the script imageick_type_gen, create a xml for your fonts using the processing script: find /dir/to/font/ -type f -name &apos;*.ttf&apos; | imagick_type_gen -f - &gt; ~/.ImageMagick/type-myfonts.xml Include the xml in main xml file: cat &lt;&lt;\\EOF &gt;&gt;~/.magick/type.xml &lt;typemap&gt; &lt;include file=&quot;type-myfonts.xml&quot; /&gt; &lt;/typemap&gt; EOF Check font using the command: convert -list font","categories":[],"tags":[{"name":"trick","slug":"trick","permalink":"https://crotoc.github.io/tags/trick/"}],"keywords":[]},{"title":"Modify the hotkey of Chinese-English language switching in Windows 10","slug":"Modify-the-hotkey-of-Chinese-English-language-switching-in-Windows-10","date":"2018-09-25T03:51:49.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/09/25/Modify-the-hotkey-of-Chinese-English-language-switching-in-Windows-10/","link":"","permalink":"https://crotoc.github.io/2018/09/25/Modify-the-hotkey-of-Chinese-English-language-switching-in-Windows-10/","excerpt":"","text":"Modify the hotkey of Chinese-English language switching in Windows 10The problem is very annoying because the hotkey ctrl+space has conflicted with others in emacs or other program. My thought is changing it to another combination ctrl+F1. Open regedit Navigate to HKEY_USER.DEFAULT\\Input Method\\Hot Keys\\00000010\\ Modify the Key Modifiers and Virtual Key. Only disable the hotkey is change the first two digits of the two keys in 00. Key Modifiers: 00 c0 00 00. Virtual Key: 00 00 00 00 For Key modifiers, the rules of the number are like: __00__ c0 00 00 : The underlining two digits indicate one of modifier keys. CTRL: 02 ALT: 01 SHIFT: 04 Disable: 00 00 __c0__ 00 00 : The underlining two digits indicate the left or right position on the keybord. Left: 80 Right: 40 Left or Right: 8+4=12=c0 For virtual key, the rules are like: __00__ 00 00 00 : The hex of ascii of a virtual key. Please see the reference: https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes So if we want F1, the hex code is 70: __70__ 00 00 00 : The hex of ascii of F1. Restart your computer. For my case, I just need to modify virtual key to 70 00 00 00","categories":[],"tags":[{"name":"Computer setup","slug":"Computer-setup","permalink":"https://crotoc.github.io/tags/Computer-setup/"}],"keywords":[]},{"title":"Unblock Youku on a openWRT Router","slug":"Unblock-Youku-on-a-openWRT-Router","date":"2018-09-14T02:18:12.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/09/14/Unblock-Youku-on-a-openWRT-Router/","link":"","permalink":"https://crotoc.github.io/2018/09/14/Unblock-Youku-on-a-openWRT-Router/","excerpt":"","text":"How to unblock youku on your routerTo watched videos from China apps like youku, tencent, sogou, we have to unblock the restrictions put on these website. I applied this method to two models of routers: NETGEAR WNDR3700 ($20 on ebay) and R7800 ($160 on ebay) and they perform well enough. Prerequisites A router that can install openWRT. A list of urls needed to be unblocked. A shadowsocks proxy (let me know if you don’t have) Plenty of time Installation of openWRTThe openWRT is a open-source system that can be installed on routers, which can bring many great new functions. It is actively developed and maintained. For R7800, we need to flash openWRT through tftp. 1) Download the firmware from https://openwrt.org/toh/hwdata/netgear/netgear_r7800. Remember the right file is with suffix of “.img” wget http://downloads.openwrt.org/releases/18.06.1/targets/ipq806x/generic/openwrt-18.06.1-ipq806x-netgear_r7800-squashfs-factory.img 2) Install tftp on the computer(Ubuntu). sudo apt-get install tftp 3) Let the router enter into recovery mode. a. Power off the router b. Keep pressing the reset button using a pin and turn on the router. c. Release the reset button until the light blink white. The light of router will blink orange first and then after for a few seconds blink white. 4) Connect the computer with router to one of the lan ports and mannually set the ip to 192.168.1.2. Because the router’s ip is 192.168.1.1, don’t use this ip for the computer. IP: 192.168.1.2 MASK: 255.255.255.0 Gateway: 192.168.1.1 DNS: 192.168.1.1 (Not important) 5) Ping the router from the computer to make sure everthing is all right. ping 192.168.1.1 ## 64 bytes from 192.168.1.1: icmp_seq=1 ttl=47 time=80.3 ms ## 64 bytes from 192.168.1.1: icmp_seq=2 ttl=47 time=80.3 ms ## 64 bytes from 192.168.1.1: icmp_seq=3 ttl=47 time=80.3 ms ## 64 bytes from 192.168.1.1: icmp_seq=4 ttl=47 time=80.2 ms 6) Connect to the router using tftp and upload the openWRT image. tftp 192.168.1.1 tftp&gt; ? Commands may be abbreviated. Commands are: connect connect to remote tftp mode set file transfer mode put send file get receive file quit exit tftp verbose toggle verbose mode trace toggle packet tracing status show current status binary set mode to octet ascii set mode to netascii rexmt set per-packet retransmission timeout timeout set total retransmission timeout ? print help information Change to binary mode. This step is necessary. tftp&gt; binary Upload the openWRT img file. tftp&gt; put openwrt-18.06.1-ipq806x-netgear_r7800-squashfs-factory.img It will show the size uploaded. Quit tftp. tftp&gt; quit 7) If everything goes well, the blinking white light will turn off and the router will restart with openWRT. Install shadowsocks packagesAfter restarting, the router is running openWRT and we can connect to the router using luci. Input 192.168.1.1 in a browser and it will ask you to set a password. After this we can connect to the router using ssh with the password. ssh root@192.168.1.1 To install shdowsocks, we need use the package manager command. First refresh the package list by: opkg update Then find all the packages related to shawdowsocks. opkg find &quot;*shadowsocks*&quot; opkg install shadowsocks-client ## Must opkg install shadowsocks-libev-config ## Not necessary opkg install shadowsocks-libev-ss-local ## Redirect requests to shadowsocks server) opkg install shadowsocks-libev-ss-redir ## Build up rules to redirect) opkg install shadowsocks-libev-ss-rules ## ss server, not necessary opkg install shadowsocks-libev-ss-server ## For DNS requests, not necessary in this case opkg install shadowsocks-libev-ss-tunnel ##To simple your life opkg install luci-app-shadowsocks This method needs dnsmasq and ipset to build a ip filter. The dnsmasq installed by the image does not support ipset, so we need to install dnsmasq-full opkg remove dnsmasq opkg install dnsmasq-full I believe ipset package is already installed with shadowsocks. We can validate it by: opkg install ipset Configurations of shadowsocksI would like to configure shadowsocks using luci, which can save you a lot of time. Add a ss proxy server. Add a ss-redir service. The key part is putting the url list to the place that is to be forward to ss proxy server. Because the step 3 needs to add the url to the related ipset hash when starting the service, so it doesn’t allow any bad urls. Or the service can not start. To overcome this flaw, I modified the /usr/bin/ss-rules by adding a new ipset hash set named “_unblock” and build a new iptable rules to this set. If you don’t want to revise the ss-rules, you can use the command bellow. configuratins of ipset and iptablesInitiate a new ipset ipset -N _unblock hash:ip Add the following iptable rules to iptable: ## Create shadowsocks router rules iptables -t nat -N shadowsocks iptables -t mangle -N shadowsocks iptables -t nat -A shadowsocks -d x.x.x.x -j RETURN # x.x.x.x为shadowsocks服务器地址 iptables -t nat -A shadowsocks -d 0.0.0.0/8 -j RETURN iptables -t nat -A shadowsocks -d 10.0.0.0/8 -j RETURN iptables -t nat -A shadowsocks -d 127.0.0.0/8 -j RETURN iptables -t nat -A shadowsocks -d 169.254.0.0/16 -j RETURN iptables -t nat -A shadowsocks -d 172.16.0.0/12 -j RETURN iptables -t nat -A shadowsocks -d 192.168.0.0/16 -j RETURN iptables -t nat -A shadowsocks -d 224.0.0.0/4 -j RETURN iptables -t nat -A shadowsocks -d 240.0.0.0/4 -j RETURN ## TCP iptables -t nat -A shadowsocks -p tcp -m set --match-set _unblock_ dst -j REDIRECT --to-port 1080 ## UDP using TPROXY iptables -t mangle -A shadowsocks -p udp -m set --match-set redir dst ! --dport 53 -j TPROXY --on-port 1080 --tproxy-mark 0x01/0x01 ip route add local default dev lo table 100 ip rule add fwmark 0x01/0x01 lookup 100 ip route list table 100 iptables -t nat -A PREROUTING -p tcp -j shadowsocks iptables -t mangle -A PREROUTING -j shadowsocks iptables -t nat -A OUTPUT -p tcp -j shadowsocks iptables -t mangle -A OUTPUT -j shadowsocks Configuration of dnsmasq-fullAdd a conf dir to be loaded by dnsmasq echo &quot;conf-dir=/etc/dnsmasq.d&quot;&gt;&gt;/etc/dnsmasq.conf mkdir /etc/dnsmasq.d cd /etc/dnsmasq.d touch redir_test.conf Restart dnsmasq after revising config file every time /etc/init.d/dnsmasq restart Testnetstat -nlp ## listen to the port to see what kind of url tcpdump -i br-lan host xxxxx ## Test ipset ping xxxx ipset list referencehttp://blog.kompaz.win/2017/03/24/OpenWRT%20Shadowsocks+GFWList%20%E6%B5%81%E9%87%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%B5%81/","categories":[],"tags":[{"name":"openWRT","slug":"openWRT","permalink":"https://crotoc.github.io/tags/openWRT/"},{"name":"linux","slug":"linux","permalink":"https://crotoc.github.io/tags/linux/"},{"name":"entertainment","slug":"entertainment","permalink":"https://crotoc.github.io/tags/entertainment/"}],"keywords":[]},{"title":"Setup rmarkdown on server without Rstudio","slug":"rmarkdown-config","date":"2018-09-11T06:03:45.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/09/11/rmarkdown-config/","link":"","permalink":"https://crotoc.github.io/2018/09/11/rmarkdown-config/","excerpt":"","text":"How to Setup rmarkdown on server without RstudioInstall texliveBecause the server is centos6 and the glibc is too old to support texlive 2018, I downloaded texlive 2017 from a website. wget http://ftp.math.utah.edu/pub/tex/historic/systems/texlive/2017/texlive2017-20170524.iso Mount the iso and then cp the files to a dir, cd to the dir and them install a minimal distribute using the command: cd ~/chenr6/download/texlive ./install-tl --gui=text If you want to install to a specific dir: export TEXLIVE_INSTALL_PREFIX=/your/dir/ Input capital S to select scheme and input lower case d to select basic scheme: Select scheme: a [ ] full scheme (everything) b [ ] medium scheme (small + more packages and languages) c [ ] small scheme (basic + xetex, metapost, a few languages) d [X] basic scheme (plain and latex) e [ ] minimal scheme (plain only) f [ ] ConTeXt scheme g [ ] GUST TeX Live scheme h [ ] infrastructure-only scheme (no TeX at all) i [ ] teTeX scheme (more than medium, but nowhere near full) j [ ] custom selection of collections Actions: (disk space required: 157 MB) &lt;R&gt; return to main menu &lt;Q&gt; quit Enter letter to select scheme: d Input R to return Input O to ignore the installation of document: Options customization: &lt;P&gt; use letter size instead of A4 by default: [ ] &lt;E&gt; execution of restricted list of programs: [X] &lt;F&gt; create format files: [X] &lt;D&gt; install font/macro doc tree: [ ] &lt;S&gt; install font/macro source tree: [ ] &lt;L&gt; create symlinks in standard directories: [ ] binaries to: manpages to: info to: &lt;Y&gt; after installation, get package updates from CTAN: [X] Actions: (disk space required: 157 MB) &lt;R&gt; return to main menu &lt;Q&gt; quit Enter command: Input R to return and Input I to begin the installation Setup texliveAfter installation, put the binary dir to your PATH: export PATH=$PATH:/your/dir/to/bin/ To avoide to use the local repository, which is default, set a online repository: tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet Install the missing packages by using the command: tlmgr list ecrm2074 Packages containing files matching crm2074&apos;: ec: texmf-dist/fonts/source/jknappen/ec/ecrm2074.mf texmf-dist/fonts/tfm/jknappen/ec/ecrm2074.tfm The package including ecrm2074 is ec, so use the command: tlmgr install ec If you want to install the package to a specific dir: export TEXMFHOME=/your/dir/ ## Test your installation by compile a pdf using: pdflatex your.tex","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://crotoc.github.io/tags/linux/"},{"name":"GNU","slug":"GNU","permalink":"https://crotoc.github.io/tags/GNU/"}],"keywords":[]},{"title":"Gnu join - join two files by specified field","slug":"gnu-join","date":"2018-08-10T04:36:45.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/08/10/gnu-join/","link":"","permalink":"https://crotoc.github.io/2018/08/10/gnu-join/","excerpt":"","text":"How to join multiple files using GNU joinBasic usageCreate two files with TAB delimiter file1: a 1 b 1 d 1 e 1 g 1 file2: a 2 b 2 c 2 e 2 f 2 Join them use join: join -1 1 -2 1 file1 file2 Output: a 1 2 d 1 2 e 1 2 The very useful options for GNU join-a1 - print unmatched lines in file1;join -1 1 -1 1 file1 file2 -a1 Output: a 1 2 b 1 d 1 2 e 1 2 g 1 -a2 - print unmatched lines in file2join -1 1 -1 1 file1 file2 -a2 Output: a 1 2 c 2 d 1 2 e 1 2 f 2 -a1 -a2 - print unmatched lines in both file1 and file2join -1 1 -1 1 file1 file2 -a1 -a2 Output: a 1 2 b 1 c 2 d 1 2 e 1 2 f 2 g 1 Be careful that tab is not aligned well. -o - To align the output in table format, use the option to custome the outputjoin -1 1 -1 1 file1 file2 -a1 -a2 -o 0,1.2,2.2 0 means the joined column.1.2 means print the column 2 in file1;2.2 means print the column 2 in file2; Output: a 1 2 b 1 c 2 d 1 2 e 1 2 f 2 g 1 If file1 and files have more than 2 columns, modify the -o string -t - To use the TAB as output delimiterjoin -1 1 -1 1 file1 file2 -a1 -a2 -o 0,1.2,2.2 -t$&apos;\\t&apos; Output: a 1 2 b 1 c 2 d 1 2 e 1 2 f 2 g 1 –check-order - join requires the input file sorted, if join with 1st column, please sort the input files using 1st columns before use join. And to make sure there is no problem, use this option to check.join -1 1 -1 1 file1 file2 -a1 -a2 -o 0,1.2,2.2 -t$&apos;\\t&apos; --check-order Output: a 1 2 b 1 c 2 d 1 2 e 1 2 f 2 g 1 Create non-sorted file3: a 3 d 3 c 3 e 3 f 3 join file1 and file3: join -1 1 -1 1 file1 file3 -a1 -a2 -o 0,1.2,2.2 -t$&apos;\\t&apos; --check-order Output with error message: a 1 3 b 1 join: file3:3: is not sorted: c 3 -e - To make the output format more strict and use this option to fill missing columns. This helps greatly if you need to process the file in the downstreaming analysis.join -1 1 -1 1 file1 file2 -a1 -a2 -o 0,1.2,2.2 -t$&apos;\\t&apos; --check-order -eNULL Output: a 1 2 b 1 NULL c NULL 2 d 1 2 e 1 2 f NULL 2 g 1 NULL Output is a very tidy table.","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://crotoc.github.io/tags/linux/"},{"name":"GNU","slug":"GNU","permalink":"https://crotoc.github.io/tags/GNU/"}],"keywords":[]},{"title":"travis_test","slug":"travis-test","date":"2018-08-09T07:56:14.000Z","updated":"2019-03-25T21:56:42.225Z","comments":true,"path":"2018/08/09/travis-test/","link":"","permalink":"https://crotoc.github.io/2018/08/09/travis-test/","excerpt":"","text":"This artile is auto deployed by travis! Test!","categories":[],"tags":[],"keywords":[]}]}